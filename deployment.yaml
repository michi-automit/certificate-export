apiVersion: apps/v1
kind: Deployment
metadata:
  name: certificate-export
  labels:
    app: certificate-export
spec:
  replicas: 1
  selector:
    matchLabels:
      app: certificate-export
  template:
    metadata:
      labels:
        app: certificate-export
    spec:
      containers:
      - name: certificate-export
        image: docker.io/kamleitermichael/certificate-export:latest
        volumeMounts:
        - name: script-volume
          mountPath: /app
        ports:
        - containerPort: 8000
        env:
        - name: prometheus_multiproc_dir
          value: /tmp/
      volumes:
      - name: script-volume
        configMap:
          name: certificate-exporter-script
---
apiVersion: v1
kind: Service
metadata:
  name: certificate-export
  labels:
    app: certificate-export
spec:
  selector:
    app: certificate-export
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-reader-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificate-exporter-script
data:
  script.py: |
    import os
    import time
    import requests
    import prometheus_client
    from prometheus_client import Counter, Gauge
    from kubernetes import client, config

    config.load_incluster_config()
    expiration_time = Gauge('certificate_expiration_time', 'Time in seconds until the certificate expires')

    def retrieve_secrets():
      v1 = client.CoreV1Api()
      secrets = v1.list_secret_for_all_namespaces(watch=False)
      for secret in secrets.items:
        if secret.type == "kubernetes.io/tls":
            print("Server: " + secret)
        
    if __name__ == '__main__':
        while True:
            retrieve_secrets()
            time.sleep(21600)

    # Serve the Prometheus metrics
    prometheus_client.start_http_server(8000)
---
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
  annotations:
    kubernetes.io/service-account.name: test
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test
secrets:
- name: test-secret