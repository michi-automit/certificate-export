apiVersion: apps/v1
kind: Deployment
metadata:
  name: certificate-export
  labels:
    app: certificate-export
spec:
  replicas: 1
  selector:
    matchLabels:
      app: certificate-export
  template:
    metadata:
      labels:
        app: certificate-export
    spec:
      containers:
      - name: certificate-export
        image: docker.io/kamleitermichael/certificate-export:v0.9
        command: ["python3", "/app/script.py"]
        volumeMounts:
        - name: script-volume
          mountPath: /app
        ports:
        - containerPort: 8000
        env:
        - name: prometheus_multiproc_dir
          value: /tmp/
        resources:
          limits:
            memory: 1Gi
            cpu: "500m"
      volumes:
      - name: script-volume
        configMap:
          name: certificate-exporter-script
---
apiVersion: v1
kind: Service
metadata:
  name: certificate-export
  labels:
    app: certificate-export
spec:
  selector:
    app: certificate-export
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-reader-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificate-exporter-script
data:
  script.py: |
      #python3.9
      from kubernetes import client, config
      from datetime import datetime, timedelta
      import time
      import base64
      import prometheus_client
      from cryptography import x509
      from cryptography.hazmat.backends import default_backend
      print("init")
      print("foo")
      # Load Kubernetes Configuration
      config.load_incluster_config()

      # Initialize Kubernetes API Client
      v1 = client.CoreV1Api()

      # Prometheus Metric for Remaining Valid Days
      remaining_valid_days = prometheus_client.Gauge(
          'remaining_valid_days', 'Remaining Valid Days for Kubernetes Secrets of Type "kubernetes.io/tls"', ['secret_name', 'secret_index', 'kubernetes_namespace'])

      remaining_valid_days_errors = prometheus_client.Gauge(
          'remaining_valid_days_errors', 'Errorcount', ['secret_name']
      )

      # Function to Retrieve and Update Prometheus Metrics
      def update_metrics():

          secrets = v1.list_secret_for_all_namespaces().items

          # Loop Through Each Secret
          for secret in secrets:
              # Check if Secret is of Type "kubernetes.io/tls"
              if secret.type == "kubernetes.io/tls":
                  namespace = secret.metadata.namespace
                  secret_name = secret.metadata.name
                  secret_index = 0
                  print("Secret: " + secret_name)
                  certs = base64.b64decode(secret.data["tls.crt"]).decode("utf-8")
                  not_before, not_after = None, None
                  certificates = certs.split("-----END CERTIFICATE-----")
                  certificates = [c + "-----END CERTIFICATE-----" for c in certificates if len(c) > 1]
                  for crt in certificates:
                      try:
                          cert = x509.load_pem_x509_certificate(crt.encode(), default_backend())
                          valid_from = cert.not_valid_before
                          valid_to = cert.not_valid_after
                          today = datetime.now()

                          print("Secret_Index: " + str(secret_index))
                          
                          remaining_time = valid_to - today
                          remaining_days = remaining_time.days
                          print(remaining_days)
                          print(f"Das Zertifikat ist g√ºltig von {valid_from} bis {valid_to}. " + namespace, secret_name)

                          remaining_valid_days.labels(secret_name, secret_index, namespace).set(remaining_days)
                          
                          secret_index +=1
                      except Exception as e:
                          print("Fehler beim auslesen vom Secret " + secret_name)
                          remaining_valid_days_errors.labels(secret_name).inc()


      if __name__ == '__main__':
          prometheus_client.start_http_server(8000)
          while True:
              update_metrics()
              time.sleep(21600)